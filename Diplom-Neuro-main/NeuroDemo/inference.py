import numpy as np

n = 13 # Входные значения
n_dim = 10 # Веса
n_out = 6 # Выходные значения

D_m = np.array([[0.1, 0.27, 0.53, 0.26, 0.51, 0.29, 0.17, 0.07, 0.02, 0.11, 0.02, 0.01, 0.01],
                [0.08, 0.3, 0.25, 0.27, 0.65, 0.31, 0.05, 0.07, 0.02, 0.21, 0.03, 0.001, 0.01],
                [5.0025, 0.0174, 0.132, 0.179, 0.158, 0.198, 0.06, 0.124, 0.026, 0.268, 0.099, 0.255, 0.207],
                [7.4257, 0.2996, 0.12, 0.107, 0.043, 0.03, 0.146, 0.025, 0.006, 0.16, 0.155, 0.252, 0.028],
                [3.1721, 0.0692, 0.259, 0.054, 0.149, 0.164, 0.079, 0.146, 0.077, 0.215, 0.201, 0.196, 0.17],
                [0.1, 0.27, 0.53, 0.26, 0.51, 0.29, 0.17, 0.07, 0.02, 0.11, 0.02, 0.01, 0.01],
                [0.08, 0.3, 0.25, 0.27, 0.65, 0.31, 0.05, 0.07, 0.02, 0.21, 0.03, 0.001, 0.01],
                [5.0025, 0.0174, 0.132, 0.179, 0.158, 0.198, 0.06, 0.124, 0.026, 0.268, 0.099, 0.255, 0.207],
                [7.4257, 0.2996, 0.12, 0.107, 0.043, 0.03, 0.146, 0.025, 0.006, 0.16, 0.155, 0.252, 0.028],
                [0.1, 0.27, 0.53, 0.26, 0.51, 0.29, 0.17, 0.07, 0.02, 0.11, 0.02, 0.01, 0.01]]) # количественный показатель каждого отдельного объекта оборудования

W1 = np.array([[0.17, 0.24, 0.35, 0.59, 0.16, 0.86, 0.985, 0.85, 0.254, 0.635],
                   [0.18, 0.23, 0.34, 0.52, 0.12, 0.82, 0.986, 0.85, 0.254, 0.635],
                   [0.19, 0.22, 0.33, 0.53, 0.13, 0.83, 0.923, 0.85, 0.254, 0.635],
                   [0.21, 0.21, 0.32, 0.54, 0.14, 0.851, 0.917, 0.85, 0.254, 0.635],
                   [0.22, 0.2, 0.31, 0.51, 0.11, 0.8522, 0.952, 0.85, 0.254, 0.635],
                   [0.17, 0.24, 0.35, 0.59, 0.16, 0.86, 0.985, 0.85, 0.254, 0.635],
                   [0.18, 0.23, 0.34, 0.52, 0.12, 0.82, 0.986, 0.85, 0.254, 0.635],
                   [0.19, 0.22, 0.33, 0.53, 0.13, 0.83, 0.923, 0.85, 0.254, 0.635],
                   [0.21, 0.21, 0.32, 0.54, 0.14, 0.851, 0.917, 0.85, 0.254, 0.635],
                   [0.17, 0.24, 0.35, 0.59, 0.16, 0.86, 0.985, 0.85, 0.254, 0.635],
                   [0.18, 0.23, 0.34, 0.52, 0.12, 0.82, 0.986, 0.85, 0.254, 0.635],
                   [0.19, 0.22, 0.33, 0.53, 0.13, 0.83, 0.923, 0.85, 0.254, 0.635],
                   [0.21, 0.21, 0.32, 0.54, 0.14, 0.851, 0.917, 0.85, 0.254, 0.635]])

b1 =  np.array([-0.34133575, -0.24401602, -0.06262318, -0.30410971, -0.37097632,  0.02670964, -0.51851308,  0.54665141,  0.20777536, -0.29905165 ])

W2 = np.array([[0.17, 0.24, 0.35, 0.59, 0.16, 0.86],
                   [0.18, 0.23, 0.34, 0.52, 0.12, 0.82],
                   [0.19, 0.22, 0.33, 0.53, 0.13, 0.83],
                   [0.21, 0.21, 0.32, 0.54, 0.14, 0.851],
                   [0.22, 0.2, 0.31, 0.51, 0.11, 0.8522],
                   [0.17, 0.24, 0.35, 0.59, 0.16, 0.86],
                   [0.18, 0.23, 0.34, 0.52, 0.12, 0.82],
                   [0.19, 0.22, 0.33, 0.53, 0.13, 0.83],
                   [0.21, 0.21, 0.32, 0.54, 0.14, 0.851],
                   [0.17, 0.24, 0.35, 0.59, 0.16, 0.86]])

b2 =  np.array([-0.34133575, -0.24401602, -0.06262318, -0.30410971, -0.37097632,  0.02670964])

def relu(t):
    return np.maximum(t, 0)

def softmax(t):
    out = np.exp(t)
    return out / np.sum(out)

def predict(x):
    t1 = D_m @ W1 + b1
    h1 = relu(t1)
    t2 = h1 @ W2 + b2
    z = softmax(t2)
    return z

probs = predict(D_m)
pred_class = np.argmax(probs)
#class_names = ['Setosa', 'Versicolor', 'Virginica']
#print('Predicted class:', class_names[pred_class])
print(probs)
print(pred_class)
